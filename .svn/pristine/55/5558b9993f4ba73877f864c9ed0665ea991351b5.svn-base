/***************************************************************
 Copyright (C) 2008
 by 52 North Initiative for Geospatial Open Source Software GmbH

 Contact: Andreas Wytzisk
 52 North Initiative for Geospatial Open Source Software GmbH
 Martin-Luther-King-Weg 24
 48155 Muenster, Germany
 info@52north.org

 This program is free software; you can redistribute and/or modify it under 
 the terms of the GNU General Public License version 2 as published by the 
 Free Software Foundation.

 This program is distributed WITHOUT ANY WARRANTY; even without the implied
 WARRANTY OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License along with
 this program (see gnu-gpl v2.txt). If not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA or
 visit the Free Software Foundation web page, http://www.fsf.org.

 Author: <LIST OF AUTHORS/EDITORS>
 Created: <CREATION DATE>
 Modified: <DATE OF LAST MODIFICATION (optional line)>
 ***************************************************************/

package org.n52.sos.ds.pgsql;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.n52.sos.SosConfigurator;
import org.n52.sos.SosConstants;
import org.n52.sos.cache.CapabilitiesCacheController;
import org.n52.sos.ds.IInsertObservationOperationDAO;
import org.n52.sos.ds.insert.IInsertDomainFeatureDAO;
import org.n52.sos.ds.insert.IInsertFoiDAO;
import org.n52.sos.ds.insert.IInsertRelationshipsDAO;
import org.n52.sos.ds.insert.pgsql.PGSQLInsertDAOFactory;
import org.n52.sos.ogc.om.AbstractSosObservation;
import org.n52.sos.ogc.om.SosObservationCollection;
import org.n52.sos.ogc.om.features.SosAbstractFeature;
import org.n52.sos.ogc.ows.OwsExceptionReport;
import org.n52.sos.ogc.ows.OwsExceptionReport.ExceptionCode;
import org.n52.sos.ogc.ows.OwsExceptionReport.ExceptionLevel;

/**
 * data access object for InsertObservation operation
 * 
 * @author staschc
 * 
 */
public class PGSQLInsertObservationOperationDAO implements IInsertObservationOperationDAO {

    /** logger */
    protected static final Logger log = Logger.getLogger(PGSQLInsertObservationOperationDAO.class);

    /** connection pool which contains the connections to the DB */
    private PGConnectionPool cpool;
    
    /**
     *constructor
     * 
     * @param cpool
     *        PGConnectionPool which contains the connections to the DB
     */
    public PGSQLInsertObservationOperationDAO(PGConnectionPool cpool) {
		super();
		this.cpool = cpool;
	}

	/**
     * method for inserting observation into database; should insert also new feature of interests into db
     * 
     * @param observation
     *        should be inserted into db
     * @return Returns id for observation, which is generated by the 52North SOS
     * @throws OwsExceptionReport
     *         if insert of Observation fails
     */
    public int insertObservation(AbstractSosObservation observation, boolean mobileEnabled) throws OwsExceptionReport {

        CapabilitiesCacheController capsCache;

        SosObservationCollection asos = new SosObservationCollection();
        if (observation instanceof SosObservationCollection)
            asos = (SosObservationCollection) observation;
        else
            asos.getObservationMembers().add(observation);

        int obsID = Integer.MIN_VALUE;
        Connection trCon = null;

        capsCache = SosConfigurator.getInstance().getCapsCacheController();

        try {

            trCon = cpool.getConnection();
            trCon.setAutoCommit(false);

            List<String> fois = new ArrayList<String>();
            List<String> offFois = new ArrayList<String>();
            List<String> procFois = new ArrayList<String>();

            capsCache = SosConfigurator.getInstance().getCapsCacheController();
            // capsCache.refreshFOIs();

            for (AbstractSosObservation aso : asos.getObservationMembers()) {

                PGSQLInsertDAOFactory daoFactory = new PGSQLInsertDAOFactory(cpool);
                SosAbstractFeature samplingFeat = aso.getFeatureOfInterest();

                IInsertRelationshipsDAO relationshipsDAO = daoFactory.getInsertRelationshipsDAO();
                IInsertDomainFeatureDAO insertDomFeatDAO = daoFactory.getInsertDomainFeatureDAO();

                // insert foi
                try {

                    // if foi id is NOT contained in SOS DB -> insert foi
                    if ( !capsCache.getFois().contains(samplingFeat.getId())
                            && !fois.contains(samplingFeat.getId())) {
                        IInsertFoiDAO foiDAO = daoFactory.getInsertFoiDAO();

                        foiDAO.insertFOI(samplingFeat.getId(),
                                         samplingFeat.getName(),
                                         samplingFeat.getDescription(),
                                         samplingFeat.getGeom(),
                                         samplingFeat.getFeatureType(),
                                         samplingFeat.getSchemaLink(),
                                         trCon);

                        fois.add(samplingFeat.getId());
                    }

                    // get offerings for phenomenon of observation
                    List<String> offerings = capsCache.getOfferings4Phenomenon(aso.getPhenomenonID());

                    // insert foi_off relationsship for each offering
                    for (String offering_id : offerings) {

                        // check whether offering foi relationship is already contained in DB
                        if ( !capsCache.getOffFeatures().containsKey(offering_id)
                                && !offFois.contains(samplingFeat.getId() + offering_id)) {

                            // Case 1: offering is NOT contained in foi_off -> insert relationsship
                            relationshipsDAO.insertFoiOffRelationship(samplingFeat.getId(),
                                                                      offering_id,
                                                                      trCon);

                            offFois.add(samplingFeat.getId() + offering_id);

                        }
                        else if (capsCache.getOffFeatures().get(offering_id) != null
                                && !capsCache.getOffFeatures().get(offering_id).contains(samplingFeat.getId())
                                && !offFois.contains(samplingFeat.getId() + offering_id)) {

                            // Case 2: offering is already stored in foi_off -> insert relationsship if
                            // offering NOT contains foi id
                            relationshipsDAO.insertFoiOffRelationship(samplingFeat.getId(),
                                                                      offering_id,
                                                                      trCon);

                            offFois.add(samplingFeat.getId() + offering_id);
                        }

                    }

                    // insert proc_foi relationsship
                    if ( (capsCache.getProc4FOI(samplingFeat.getId()) == null || capsCache.getProc4FOI(samplingFeat.getId()).isEmpty())
                            && !procFois.contains(samplingFeat.getId()
                                    + aso.getProcedureID())) {

                        relationshipsDAO.insertProcFoiRelationship(aso.getProcedureID(),
                                                                   samplingFeat.getId(),
                                                                   trCon);

                        procFois.add(samplingFeat.getId() + aso.getProcedureID());
                    }
                    else if (capsCache.getProc4FOI(samplingFeat.getId()) != null
                            && !capsCache.getProc4FOI(samplingFeat.getId()).contains(aso.getProcedureID())
                            && !procFois.contains(samplingFeat.getId()
                                    + aso.getProcedureID())) {

                        relationshipsDAO.insertProcFoiRelationship(aso.getProcedureID(),
                                                                   samplingFeat.getId(),
                                                                   trCon);

                        procFois.add(samplingFeat.getId() + aso.getProcedureID());
                    }

                }
                catch (SQLException e) {
                    OwsExceptionReport se = new OwsExceptionReport(ExceptionLevel.DetailedExceptions);
                    se.addCodedException(ExceptionCode.NoApplicableCode,
                                         null,
                                         "Error while inserting foi: " + e.getMessage());
                    log.error(e.getMessage());
                    throw se;
                }

                // insert observation
                try {
                    obsID = daoFactory.getInsertObservationDAO().insertObservation(aso,
                                                                                   trCon);
                }
                catch (SQLException sqle) {
                    OwsExceptionReport se = new OwsExceptionReport(ExceptionLevel.DetailedExceptions);
                    if (sqle.getMessage().contains("duplicate key")) {
                        se.addCodedException(ExceptionCode.NoApplicableCode,
                                             null,
                                             "This observation is already contained in SOS database!");
                    }
                    else {
                        se.addCodedException(ExceptionCode.NoApplicableCode,
                                             null,
                                             sqle.getMessage());
                    }
                    log.error(sqle.getMessage());
                    throw se;
                }
                catch (IOException ioe) {
                    OwsExceptionReport se = new OwsExceptionReport(ExceptionLevel.DetailedExceptions);
                    se.addCodedException(ExceptionCode.NoApplicableCode, null, ioe.getMessage());
                    log.error(ioe.getMessage());
                    throw se;
                }

                // if mobileEnabled = true
                if (mobileEnabled) {

                    // if domain feature in request != null insert relationship and domain feature, if
                    // necessary
                    // ATTENTION: number of domain feature is currently restricted to just one!
                    if (aso.getDomainFeatureIDs() != null
                            && aso.getDomainFeatureIDs().size() != 0) {

                        if (aso.getDomainFeatureIDs().size() != 1) {
                            OwsExceptionReport se = new OwsExceptionReport(ExceptionLevel.DetailedExceptions);
                            se.addCodedException(ExceptionCode.NoApplicableCode,
                                                 null,
                                                 "Currently just one DomainFeature is supported for inserts into 52N SOS. Please contact the admin for further details!");
                            log.error("Currently just one DomainFeature is supported for inserts into 52N SOS. Please contact the admin for further details!");
                            throw se;
                        }
                        try {

                            // iterate over all domain features
                            for (SosAbstractFeature sos_af : aso.getDomainFeatureIDs()) {

                                // if only id is set, insert relationship, if necessary
                                if (sos_af.getDescription().equalsIgnoreCase("PARAMETER_"
                                        + SosConstants.PARAMETER_NOT_SET)
                                        || sos_af.getName().equalsIgnoreCase("PARAMETER_"
                                                + SosConstants.PARAMETER_NOT_SET)
                                        || sos_af.getGeom() == null) {

                                    // if df is not contained in db, throw exception
                                    if (capsCache.getDomainFeatures().contains(sos_af.getId())) {
                                        // if no procs for df are stored
                                        if (capsCache.getProcs4DomainFeature(sos_af.getId()) == null) {
                                            // insert relationship
                                            relationshipsDAO.insertProcDfRelationsship(aso.getProcedureID(),
                                                                                       sos_af.getId(),
                                                                                       trCon);

                                        }
                                        // if some procs are contained for df, insert relationship, if procID
                                        // from
                                        // request is not contained
                                        else if ( !capsCache.getProcs4DomainFeature(sos_af.getId()).contains(aso.getProcedureID())) {
                                            // insert relationship
                                            relationshipsDAO.insertProcDfRelationsship(aso.getProcedureID(),
                                                                                       sos_af.getId(),
                                                                                       trCon);

                                        }
                                    }
                                    else {
                                        OwsExceptionReport se = new OwsExceptionReport(ExceptionLevel.DetailedExceptions);
                                        log.error("Error: domainFeature '"
                                                + sos_af.getId()
                                                + "' is not contained in database. Please add a domainFeature to your request.");
                                        se.addCodedException(ExceptionCode.NoApplicableCode,
                                                             null,
                                                             "Error: domainFeature '"
                                                                     + sos_af.getId()
                                                                     + "' is not contained in database. Please add a domainFeature to your request.");
                                        throw se;
                                    }
                                }
                                else {

                                    if ( !capsCache.getDomainFeatures().contains(sos_af.getId())) {

                                        // insert domain feature, if not contained in DB
                                        insertDomFeatDAO.insertDomainFeature(sos_af.getId(),
                                                                             sos_af.getName(),
                                                                             sos_af.getDescription(),
                                                                             sos_af.getGeom(),
                                                                             sos_af.getFeatureType(),
                                                                             sos_af.getSchemaLink(),
                                                                             trCon);

                                        // insert relationship
                                        relationshipsDAO.insertProcDfRelationsship(aso.getProcedureID(),
                                                                                   sos_af.getId(),
                                                                                   trCon);

                                    }
                                    else {

                                        // if no procs for df are stored
                                        if (capsCache.getProcs4DomainFeature(sos_af.getId()) == null) {
                                            // insert relationship
                                            relationshipsDAO.insertProcDfRelationsship(aso.getProcedureID(),
                                                                                       sos_af.getId(),
                                                                                       trCon);

                                        }
                                        // if some procs are contained for df, insert relationship, if procID
                                        // from
                                        // request is not contained
                                        else if ( !capsCache.getProcs4DomainFeature(sos_af.getId()).contains(aso.getProcedureID())) {
                                            // insert relationship
                                            relationshipsDAO.insertProcDfRelationsship(aso.getProcedureID(),
                                                                                       sos_af.getId(),
                                                                                       trCon);
                                        }
                                    }
                                }

                                // insert df <-> foi
                                // case1: domain feature is not yet contained in map or relationship is not
                                // contained
                                if (capsCache.getFois4DomainFeature(sos_af.getId()) == null) {
                                    // insert relationship
                                    relationshipsDAO.insertFoiDfRelationship(samplingFeat.getId(),
                                                                             sos_af.getId(),
                                                                             trCon);
                                    if (capsCache.getDomainFeatureFois().get(sos_af.getId()) != null) {
                                        capsCache.getDomainFeatureFois().get(sos_af.getId()).add(samplingFeat.getId());
                                    }
                                    else {
                                        ArrayList<String> sfIDs = new ArrayList<String>(1);
                                        sfIDs.add(samplingFeat.getId());
                                        capsCache.getDomainFeatureFois().put(sos_af.getId(), sfIDs);
                                    }

                                }
                                // case2: relationship is not yet contained in CapabilitiesCache
                                else if ( !capsCache.getFois4DomainFeature(sos_af.getId()).contains(samplingFeat.getId())) {
                                    // insert relationship
                                    relationshipsDAO.insertFoiDfRelationship(samplingFeat.getId(),
                                                                             sos_af.getId(),
                                                                             trCon);
                                    if (capsCache.getDomainFeatureFois().get(sos_af.getId()) != null) {
                                        capsCache.getDomainFeatureFois().get(sos_af.getId()).add(samplingFeat.getId());
                                    }
                                    else {
                                        ArrayList<String> sfIDs = new ArrayList<String>(1);
                                        sfIDs.add(samplingFeat.getId());
                                        capsCache.getDomainFeatureFois().put(sos_af.getId(), sfIDs);
                                    }
                                }

                                // insert df <-> obs
                                relationshipsDAO.insertObsDfRelationship(sos_af.getId(),
                                                                         obsID + "",
                                                                         trCon);

                                // Insert df_off relationships, if necessary
                                // get offerings for phenomenon
                                for (String off : capsCache.getOfferings4Phenomenon(aso.getPhenomenonID())) {
                                    // if relationship is not contained in DB, insert relationship
                                    if ( !capsCache.getOffDomainFeatures().containsKey(off)) {
                                        relationshipsDAO.insertDfOffRelationsip(sos_af.getId(),
                                                                                off,
                                                                                trCon);
                                        if (capsCache.getOffDomainFeatures().get(off) != null) {
                                            capsCache.getOffDomainFeatures().get(off).add(sos_af.getId());
                                        }
                                        else {
                                            ArrayList<String> sfIDs = new ArrayList<String>(1);
                                            sfIDs.add(sos_af.getId());
                                            capsCache.getOffDomainFeatures().put(off, sfIDs);
                                        }
                                    }
                                }
                            }
                        }
                        catch (SQLException e) {

                            OwsExceptionReport se = new OwsExceptionReport(ExceptionLevel.DetailedExceptions);
                            se.addCodedException(ExceptionCode.NoApplicableCode,
                                                 null,
                                                 e.getMessage());
                            log.error(e.getMessage());
                            throw se;
                        }
                    }
                }

            }

            trCon.commit();
            trCon.setAutoCommit(true);

            /*
             * refresh capabilities cache through invoking this method; in former versions, there have been
             * several refresh calls during the transaction which has caused some performance issues;
             * currently, the data in the cache is not refreshed through query of data from the DB, but
             * through passing the successfully inserted observation to the cache and then updating the
             * relationships in the cache
             */
            // capsCache.refreshMetadata4newObservation(observation,mobileEnabled);
            for (AbstractSosObservation aso : asos.getObservationMembers()) {
                capsCache.updateMetadata4newObservation(aso, mobileEnabled);
            }
        }

        catch (SQLException e) {
            String message = "Error while executing insertObservation operation. Values could not be stored in database: "
                    + e.getMessage();
            OwsExceptionReport se = new OwsExceptionReport(ExceptionLevel.DetailedExceptions);
            se.addCodedException(ExceptionCode.NoApplicableCode, null, message);
            log.error(message);
            throw se;
        }
        finally {
            if (trCon != null) {
                cpool.returnConnection(trCon);
            }
        }

        return obsID;
    }

}
